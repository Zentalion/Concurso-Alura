# -*- coding: utf-8 -*-
"""CozinhAI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GJMbIeP2qAIq194xdcewMLo7qBtoD5Ap
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip -q install google-genai

# Configura a API Key do Google Gemini

import os
from google.colab import userdata

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

# Configura o cliente da SDK do Gemini

from google import genai

client = genai.Client()

MODEL_ID = "gemini-2.0-flash"

# Commented out IPython magic to ensure Python compatibility.
# Instalar Framework ADK de agentes do Google ################################################
# %pip install -q google-adk

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conte√∫dos (Content e Part)
from datetime import date
import textwrap # Para formatar melhor a sa√≠da de texto
from IPython.display import display, Markdown # Para exibir texto formatado no Colab
import requests # Para fazer requisi√ß√µes HTTP
import warnings

warnings.filterwarnings("ignore")

# Fun√ß√£o auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
def call_agent(agent: Agent, message_text: str) -> str:
    # Cria um servi√ßo de sess√£o em mem√≥ria
    session_service = InMemorySessionService()
    # Cria uma nova sess√£o (voc√™ pode personalizar os IDs conforme necess√°rio)
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conte√∫do da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execu√ß√£o do agente
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

##########################################
# --- Agente 1: Buscador de receitas --- #
##########################################
def agente_buscador(receita,data_de_hoje):
  buscador=Agent(
      name='agente_buscador', model='gemini-2.0-flash', description='Agente de buscar noticias no google',
      tools=[google_search],
      instruction='''Voc√™ √© um assistente pessoal de pesquisa culin√°ria. Sua tarefa √© usar a ferramenta de busca do google (google_search)
      para recuperar as receitas mais bem avaliadas de acordo com o que o usuario pedir e colocalas na forma de receita com modo de preparo. Se for um pedido direto ir√° retornar at√© 3 receitas de fontes diferentes.Se for mais gen√©rico como por exemplo um prato de massa ou um doce, buscar 5 receitas diferentes.
      J√° se for pedido uma refei√ß√£o completa como por exemplo um almo√ßo de familia ou um jantar romantico, retornar apenas um prato de entrada, um principal e uma sobremesa.
      Apenas se vier Balacubaco voc√™ ir√° procurar at√© 3 receita baseado no dia e ano da busca e aprersentar ao usu√°rio, n√£o perguntar as preferencias dele. Se n√£o tiver Balacubaco n√£o mensionar a data.
      '''
  )
  entrada_do_agente_buscador = f'Receita: {receita}\nData de hoje: {data_de_hoje}'
  lancamentos= call_agent(buscador, entrada_do_agente_buscador)
  return lancamentos

################################################
# --- Agente 2: Determinar pre√ßos --- #
################################################
def agente_preco(receita, lancamentos):
    precificador = Agent(
        name="agente_preco",
        model="gemini-2.0-flash",
        description="Agente que busca os pre√ßos",
        # Inserir as instru√ß√µes do Agente de Pre√ßos #################################################
        instruction="""Voc√™ √© um cozinheiro proficional, especialista em pratos com bom custo beneficio. Com base na nas receitas apresentadas pelo buscador,voc√™ deve:
        usar a ferramenta de busca do google (google_search) para encontrar o pre√ßo medio de cada ingrediente, lembrando que est√° no Brasil. Reescrever os pre√ßos para n√£o ficarem com a formata√ß√£o da fonte. Colocar os inguedientes em lista para ter apenas um por linha""",
        tools=[google_search]
    )

    entrada_do_agente_precificador = f"receita:{receita}\nLan√ßamentos: {lancamentos}"
    # Executa o agente
    precos = call_agent(precificador, entrada_do_agente_precificador)
    return precos

######################################
# --- Agente 3: Nutri√ß√£o --- #
######################################
def agente_nutricional(receita, lancamentos):
    nutricionista = Agent(
        name="agente_nutricionista",
        model="gemini-2.0-flash",
        description="Agente de verifica√ß√£o de valor nuticional",
        tools=[google_search],
        instruction="""
            Voc√™ √© um nutricionista experiente que sabe explicar o valor nutricional de alimentos.
            Voc√™ analisa receitas e mostra o valor nutricional delas como calorias, vitaminas, minerais e sua fun√ß√£o em uma alimenta√ß√£o balanceada usando o buscador do google (google_search).
            Utilize a lista de ingrtedientes das receitas fornecidas no lan√ßamentos para determinar o valor nutricional delas. Sugira substitui√ß√µes saudaveis para os ingredientes sem comprometer o sabor.
            """,

    )
    entrada_do_agente_nutricional = f"Receita: {receita}\nLan√ßamentos: {precos}"
    # Executa o agente
    nutricao = call_agent(nutricionista, entrada_do_agente_nutricional)
    return nutricao

##########################################
# --- Agente 4: Escritor da receita --- #
##########################################
def agente_receita(lancamentos, precos, nutricao):
    escritor = Agent(
        name="agente_escritor",
        model="gemini-2.0-flash",
        description="Agente escritor do card√°pio.",
        instruction="""
            Voc√™ √© um escritor de receitas, especializado em comunica√ß√£o. Voc√™ vai pegar todas as receitas encontradas pelo lancamentos e relacionar com os pre√ßos encontrados pelo precos produzindo uma receita
            que mostra os pre√ßos dos ingredientes
            Mostrar√° as informa√ß√µes que o nutricionais completas que o agente_nutricional(nutricao) obteve para cada prato de uma maneira ludica e divertida.Ao final use as informa√ß√µes de nutricao para propor novas receitas relacionadas.
            """,
    )
    entrada_do_agente_receita = f"Receitas: {lancamentos}\nPre√ßo: {precos}\nNutri√ß√£o:{nutricao}"
    # Executa o agente
    cardapio = call_agent(escritor, entrada_do_agente_receita)
    return cardapio

data_de_hoje = date.today().strftime("%d/%m/%Y")

print("üî™ CozinhAI, seu chef de cozinha pessoal ü•£")

# --- Obter o Receita do Usu√°rio ---
receita = input("üî• O que iremos preparar hoje?: ")

# Inserir l√≥gica do sistema de agentes ###############################################

if not receita:
  print('Ent√£o vou te surpriender hoje!')
  receita = ('Balacubaco')
  lancamentos= agente_buscador(receita,data_de_hoje)
  print('Encontrada as melhores receitas!üìÉ')
  precos = agente_preco(receita, lancamentos)
  print('Os melhores pre√ßos est√£o aqui!üç≥')
  nutricao = agente_nutricional(receita, lancamentos)
  print('Uma refei√ß√£o balenciada √© muito importante!üí™')
  cardapio= agente_receita(lancamentos, precos, nutricao)
  print(cardapio)
else:
  print(f'Ok! Vamos buscar algumas sugest√µes para os pratos.')

  lancamentos= agente_buscador(receita,data_de_hoje)
  print('Encontrada as melhores receitas!üìÉ')
  precos = agente_preco(receita, lancamentos)
  print('Os melhores pre√ßos est√£o aqui!üç≥')
  nutricao = agente_nutricional(receita, lancamentos)
  print('Uma refei√ß√£o balenciada √© muito importante!üí™')
  cardapio= agente_receita(lancamentos, precos, nutricao)
  print(cardapio)